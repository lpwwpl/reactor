// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class _base_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<_base_> {
} __base__default_instance_;
class BaseMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BaseMessage> {
} _BaseMessage_default_instance_;
class _test_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<_test_> {
} __test__default_instance_;
class _infor_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<_infor_> {
} __infor__default_instance_;
class _data_DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<_data_> {
} __data__default_instance_;

namespace protobuf_protocol_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_base_, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_base_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_base_, opcode_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, msgbase_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_test_, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_test_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_test_, msgbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_test_, echostr_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, sex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_infor_, date_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, msgbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, infor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(_data_, ret_),
  1,
  3,
  4,
  2,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 5, sizeof(_base_)},
  { 6, 11, sizeof(BaseMessage)},
  { 12, 18, sizeof(_test_)},
  { 20, 29, sizeof(_infor_)},
  { 34, 43, sizeof(_data_)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&__base__default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BaseMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&__test__default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&__infor__default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&__data__default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  __base__default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _BaseMessage_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  __test__default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  __infor__default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  __data__default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  __base__default_instance_.DefaultConstruct();
  _BaseMessage_default_instance_.DefaultConstruct();
  __test__default_instance_.DefaultConstruct();
  __infor__default_instance_.DefaultConstruct();
  __data__default_instance_.DefaultConstruct();
  _BaseMessage_default_instance_.get_mutable()->msgbase_ = const_cast< ::_base_*>(
      ::_base_::internal_default_instance());
  __test__default_instance_.get_mutable()->msgbase_ = const_cast< ::_base_*>(
      ::_base_::internal_default_instance());
  __data__default_instance_.get_mutable()->msgbase_ = const_cast< ::_base_*>(
      ::_base_::internal_default_instance());
  __data__default_instance_.get_mutable()->infor_ = const_cast< ::_infor_*>(
      ::_infor_::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016protocol.proto\"\030\n\006_base_\022\016\n\006opcode\030\001 \002"
      "(\005\"\'\n\013BaseMessage\022\030\n\007msgbase\030\001 \002(\0132\007._ba"
      "se_\"3\n\006_test_\022\030\n\007msgbase\030\001 \002(\0132\007._base_\022"
      "\017\n\007echoStr\030\002 \001(\t\"K\n\007_infor_\022\n\n\002id\030\001 \002(\t\022"
      "\014\n\004name\030\002 \001(\t\022\013\n\003sex\030\003 \001(\t\022\013\n\003num\030\004 \001(\t\022"
      "\014\n\004date\030\005 \001(\t\"\216\001\n\006_data_\022\030\n\007msgbase\030\001 \002("
      "\0132\007._base_\022\014\n\004flag\030\002 \002(\005\022\032\n\004type\030\003 \001(\0162\014"
      "._data_.Type\022\027\n\005infor\030\004 \001(\0132\010._infor_\022\013\n"
      "\003ret\030\005 \001(\t\"\032\n\004Type\022\t\n\005INFOR\020\001\022\007\n\003RET\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 358);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protocol_2eproto

const ::google::protobuf::EnumDescriptor* _data__Type_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool _data__Type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const _data__Type _data_::INFOR;
const _data__Type _data_::RET;
const _data__Type _data_::Type_MIN;
const _data__Type _data_::Type_MAX;
const int _data_::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int _base_::kOpcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

_base_::_base_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:_base_)
}
_base_::_base_(const _base_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:_base_)
}

void _base_::SharedCtor() {
  _cached_size_ = 0;
  opcode_ = 0;
}

_base_::~_base_() {
  // @@protoc_insertion_point(destructor:_base_)
  SharedDtor();
}

void _base_::SharedDtor() {
}

void _base_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _base_::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0].descriptor;
}

const _base_& _base_::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

_base_* _base_::New(::google::protobuf::Arena* arena) const {
  _base_* n = new _base_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void _base_::Clear() {
// @@protoc_insertion_point(message_clear_start:_base_)
  opcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool _base_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:_base_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 opcode = 1;
      case 1: {
        if (tag == 8u) {
          set_has_opcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:_base_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:_base_)
  return false;
#undef DO_
}

void _base_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:_base_)
  // required int32 opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:_base_)
}

::google::protobuf::uint8* _base_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:_base_)
  // required int32 opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:_base_)
  return target;
}

size_t _base_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:_base_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required int32 opcode = 1;
  if (has_opcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _base_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:_base_)
  GOOGLE_DCHECK_NE(&from, this);
  const _base_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const _base_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:_base_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:_base_)
    MergeFrom(*source);
  }
}

void _base_::MergeFrom(const _base_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:_base_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opcode()) {
    set_opcode(from.opcode());
  }
}

void _base_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:_base_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _base_::CopyFrom(const _base_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:_base_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _base_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void _base_::Swap(_base_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void _base_::InternalSwap(_base_* other) {
  std::swap(opcode_, other->opcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata _base_::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// _base_

// required int32 opcode = 1;
bool _base_::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void _base_::set_has_opcode() {
  _has_bits_[0] |= 0x00000001u;
}
void _base_::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void _base_::clear_opcode() {
  opcode_ = 0;
  clear_has_opcode();
}
::google::protobuf::int32 _base_::opcode() const {
  // @@protoc_insertion_point(field_get:_base_.opcode)
  return opcode_;
}
void _base_::set_opcode(::google::protobuf::int32 value) {
  set_has_opcode();
  opcode_ = value;
  // @@protoc_insertion_point(field_set:_base_.opcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseMessage::kMsgbaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseMessage::BaseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BaseMessage)
}
BaseMessage::BaseMessage(const BaseMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msgbase()) {
    msgbase_ = new ::_base_(*from.msgbase_);
  } else {
    msgbase_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:BaseMessage)
}

void BaseMessage::SharedCtor() {
  _cached_size_ = 0;
  msgbase_ = NULL;
}

BaseMessage::~BaseMessage() {
  // @@protoc_insertion_point(destructor:BaseMessage)
  SharedDtor();
}

void BaseMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete msgbase_;
  }
}

void BaseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseMessage::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1].descriptor;
}

const BaseMessage& BaseMessage::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

BaseMessage* BaseMessage::New(::google::protobuf::Arena* arena) const {
  BaseMessage* n = new BaseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:BaseMessage)
  if (has_msgbase()) {
    GOOGLE_DCHECK(msgbase_ != NULL);
    msgbase_->::_base_::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BaseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BaseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required ._base_ msgbase = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgbase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BaseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BaseMessage)
  return false;
#undef DO_
}

void BaseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BaseMessage)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msgbase_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BaseMessage)
}

::google::protobuf::uint8* BaseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BaseMessage)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msgbase_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BaseMessage)
  return target;
}

size_t BaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BaseMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msgbase_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BaseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BaseMessage)
    MergeFrom(*source);
  }
}

void BaseMessage::MergeFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BaseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_msgbase()) {
    mutable_msgbase()->::_base_::MergeFrom(from.msgbase());
  }
}

void BaseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessage::CopyFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_msgbase()) {
    if (!this->msgbase_->IsInitialized()) return false;
  }
  return true;
}

void BaseMessage::Swap(BaseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseMessage::InternalSwap(BaseMessage* other) {
  std::swap(msgbase_, other->msgbase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseMessage::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseMessage

// required ._base_ msgbase = 1;
bool BaseMessage::has_msgbase() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseMessage::set_has_msgbase() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseMessage::clear_has_msgbase() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseMessage::clear_msgbase() {
  if (msgbase_ != NULL) msgbase_->::_base_::Clear();
  clear_has_msgbase();
}
const ::_base_& BaseMessage::msgbase() const {
  // @@protoc_insertion_point(field_get:BaseMessage.msgbase)
  return msgbase_ != NULL ? *msgbase_
                         : *::_base_::internal_default_instance();
}
::_base_* BaseMessage::mutable_msgbase() {
  set_has_msgbase();
  if (msgbase_ == NULL) {
    msgbase_ = new ::_base_;
  }
  // @@protoc_insertion_point(field_mutable:BaseMessage.msgbase)
  return msgbase_;
}
::_base_* BaseMessage::release_msgbase() {
  // @@protoc_insertion_point(field_release:BaseMessage.msgbase)
  clear_has_msgbase();
  ::_base_* temp = msgbase_;
  msgbase_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_msgbase(::_base_* msgbase) {
  delete msgbase_;
  msgbase_ = msgbase;
  if (msgbase) {
    set_has_msgbase();
  } else {
    clear_has_msgbase();
  }
  // @@protoc_insertion_point(field_set_allocated:BaseMessage.msgbase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int _test_::kMsgbaseFieldNumber;
const int _test_::kEchoStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

_test_::_test_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:_test_)
}
_test_::_test_(const _test_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  echostr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_echostr()) {
    echostr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.echostr_);
  }
  if (from.has_msgbase()) {
    msgbase_ = new ::_base_(*from.msgbase_);
  } else {
    msgbase_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:_test_)
}

void _test_::SharedCtor() {
  _cached_size_ = 0;
  echostr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgbase_ = NULL;
}

_test_::~_test_() {
  // @@protoc_insertion_point(destructor:_test_)
  SharedDtor();
}

void _test_::SharedDtor() {
  echostr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msgbase_;
  }
}

void _test_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _test_::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2].descriptor;
}

const _test_& _test_::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

_test_* _test_::New(::google::protobuf::Arena* arena) const {
  _test_* n = new _test_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void _test_::Clear() {
// @@protoc_insertion_point(message_clear_start:_test_)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_echostr()) {
      GOOGLE_DCHECK(!echostr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*echostr_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgbase()) {
      GOOGLE_DCHECK(msgbase_ != NULL);
      msgbase_->::_base_::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool _test_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:_test_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required ._base_ msgbase = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgbase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string echoStr = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_echostr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->echostr().data(), this->echostr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_test_.echoStr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:_test_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:_test_)
  return false;
#undef DO_
}

void _test_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:_test_)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msgbase_, output);
  }

  // optional string echoStr = 2;
  if (has_echostr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->echostr().data(), this->echostr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_test_.echoStr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->echostr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:_test_)
}

::google::protobuf::uint8* _test_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:_test_)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msgbase_, false, target);
  }

  // optional string echoStr = 2;
  if (has_echostr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->echostr().data(), this->echostr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_test_.echoStr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->echostr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:_test_)
  return target;
}

size_t _test_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:_test_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msgbase_);
  }
  // optional string echoStr = 2;
  if (has_echostr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->echostr());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _test_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:_test_)
  GOOGLE_DCHECK_NE(&from, this);
  const _test_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const _test_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:_test_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:_test_)
    MergeFrom(*source);
  }
}

void _test_::MergeFrom(const _test_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:_test_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_echostr()) {
      set_has_echostr();
      echostr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.echostr_);
    }
    if (from.has_msgbase()) {
      mutable_msgbase()->::_base_::MergeFrom(from.msgbase());
    }
  }
}

void _test_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:_test_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _test_::CopyFrom(const _test_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:_test_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _test_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_msgbase()) {
    if (!this->msgbase_->IsInitialized()) return false;
  }
  return true;
}

void _test_::Swap(_test_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void _test_::InternalSwap(_test_* other) {
  echostr_.Swap(&other->echostr_);
  std::swap(msgbase_, other->msgbase_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata _test_::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// _test_

// required ._base_ msgbase = 1;
bool _test_::has_msgbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void _test_::set_has_msgbase() {
  _has_bits_[0] |= 0x00000002u;
}
void _test_::clear_has_msgbase() {
  _has_bits_[0] &= ~0x00000002u;
}
void _test_::clear_msgbase() {
  if (msgbase_ != NULL) msgbase_->::_base_::Clear();
  clear_has_msgbase();
}
const ::_base_& _test_::msgbase() const {
  // @@protoc_insertion_point(field_get:_test_.msgbase)
  return msgbase_ != NULL ? *msgbase_
                         : *::_base_::internal_default_instance();
}
::_base_* _test_::mutable_msgbase() {
  set_has_msgbase();
  if (msgbase_ == NULL) {
    msgbase_ = new ::_base_;
  }
  // @@protoc_insertion_point(field_mutable:_test_.msgbase)
  return msgbase_;
}
::_base_* _test_::release_msgbase() {
  // @@protoc_insertion_point(field_release:_test_.msgbase)
  clear_has_msgbase();
  ::_base_* temp = msgbase_;
  msgbase_ = NULL;
  return temp;
}
void _test_::set_allocated_msgbase(::_base_* msgbase) {
  delete msgbase_;
  msgbase_ = msgbase;
  if (msgbase) {
    set_has_msgbase();
  } else {
    clear_has_msgbase();
  }
  // @@protoc_insertion_point(field_set_allocated:_test_.msgbase)
}

// optional string echoStr = 2;
bool _test_::has_echostr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void _test_::set_has_echostr() {
  _has_bits_[0] |= 0x00000001u;
}
void _test_::clear_has_echostr() {
  _has_bits_[0] &= ~0x00000001u;
}
void _test_::clear_echostr() {
  echostr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_echostr();
}
const ::std::string& _test_::echostr() const {
  // @@protoc_insertion_point(field_get:_test_.echoStr)
  return echostr_.GetNoArena();
}
void _test_::set_echostr(const ::std::string& value) {
  set_has_echostr();
  echostr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_test_.echoStr)
}
#if LANG_CXX11
void _test_::set_echostr(::std::string&& value) {
  set_has_echostr();
  echostr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_test_.echoStr)
}
#endif
void _test_::set_echostr(const char* value) {
  set_has_echostr();
  echostr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_test_.echoStr)
}
void _test_::set_echostr(const char* value, size_t size) {
  set_has_echostr();
  echostr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_test_.echoStr)
}
::std::string* _test_::mutable_echostr() {
  set_has_echostr();
  // @@protoc_insertion_point(field_mutable:_test_.echoStr)
  return echostr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _test_::release_echostr() {
  // @@protoc_insertion_point(field_release:_test_.echoStr)
  clear_has_echostr();
  return echostr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _test_::set_allocated_echostr(::std::string* echostr) {
  if (echostr != NULL) {
    set_has_echostr();
  } else {
    clear_has_echostr();
  }
  echostr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echostr);
  // @@protoc_insertion_point(field_set_allocated:_test_.echoStr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int _infor_::kIdFieldNumber;
const int _infor_::kNameFieldNumber;
const int _infor_::kSexFieldNumber;
const int _infor_::kNumFieldNumber;
const int _infor_::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

_infor_::_infor_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:_infor_)
}
_infor_::_infor_(const _infor_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sex()) {
    sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
  }
  num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_num()) {
    num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_date()) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:_infor_)
}

void _infor_::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

_infor_::~_infor_() {
  // @@protoc_insertion_point(destructor:_infor_)
  SharedDtor();
}

void _infor_::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void _infor_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _infor_::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3].descriptor;
}

const _infor_& _infor_::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

_infor_* _infor_::New(::google::protobuf::Arena* arena) const {
  _infor_* n = new _infor_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void _infor_::Clear() {
// @@protoc_insertion_point(message_clear_start:_infor_)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_id()) {
      GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*id_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_sex()) {
      GOOGLE_DCHECK(!sex_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sex_.UnsafeRawStringPointer())->clear();
    }
    if (has_num()) {
      GOOGLE_DCHECK(!num_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*num_.UnsafeRawStringPointer())->clear();
    }
    if (has_date()) {
      GOOGLE_DCHECK(!date_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*date_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool _infor_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:_infor_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_infor_.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_infor_.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sex = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_infor_.sex");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string num = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_infor_.num");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string date = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_infor_.date");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:_infor_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:_infor_)
  return false;
#undef DO_
}

void _infor_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:_infor_)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sex(), output);
  }

  // optional string num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->num(), output);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:_infor_)
}

::google::protobuf::uint8* _infor_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:_infor_)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sex(), target);
  }

  // optional string num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->num(), target);
  }

  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_infor_.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:_infor_)
  return target;
}

size_t _infor_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:_infor_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // optional string num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }

    // optional string date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _infor_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:_infor_)
  GOOGLE_DCHECK_NE(&from, this);
  const _infor_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const _infor_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:_infor_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:_infor_)
    MergeFrom(*source);
  }
}

void _infor_::MergeFrom(const _infor_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:_infor_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_sex()) {
      set_has_sex();
      sex_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sex_);
    }
    if (from.has_num()) {
      set_has_num();
      num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_);
    }
    if (from.has_date()) {
      set_has_date();
      date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
    }
  }
}

void _infor_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:_infor_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _infor_::CopyFrom(const _infor_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:_infor_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _infor_::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void _infor_::Swap(_infor_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void _infor_::InternalSwap(_infor_* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  sex_.Swap(&other->sex_);
  num_.Swap(&other->num_);
  date_.Swap(&other->date_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata _infor_::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// _infor_

// required string id = 1;
bool _infor_::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void _infor_::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void _infor_::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void _infor_::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& _infor_::id() const {
  // @@protoc_insertion_point(field_get:_infor_.id)
  return id_.GetNoArena();
}
void _infor_::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_infor_.id)
}
#if LANG_CXX11
void _infor_::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_infor_.id)
}
#endif
void _infor_::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_infor_.id)
}
void _infor_::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_infor_.id)
}
::std::string* _infor_::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:_infor_.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _infor_::release_id() {
  // @@protoc_insertion_point(field_release:_infor_.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _infor_::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:_infor_.id)
}

// optional string name = 2;
bool _infor_::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void _infor_::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void _infor_::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void _infor_::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& _infor_::name() const {
  // @@protoc_insertion_point(field_get:_infor_.name)
  return name_.GetNoArena();
}
void _infor_::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_infor_.name)
}
#if LANG_CXX11
void _infor_::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_infor_.name)
}
#endif
void _infor_::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_infor_.name)
}
void _infor_::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_infor_.name)
}
::std::string* _infor_::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:_infor_.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _infor_::release_name() {
  // @@protoc_insertion_point(field_release:_infor_.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _infor_::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:_infor_.name)
}

// optional string sex = 3;
bool _infor_::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void _infor_::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
void _infor_::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
void _infor_::clear_sex() {
  sex_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sex();
}
const ::std::string& _infor_::sex() const {
  // @@protoc_insertion_point(field_get:_infor_.sex)
  return sex_.GetNoArena();
}
void _infor_::set_sex(const ::std::string& value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_infor_.sex)
}
#if LANG_CXX11
void _infor_::set_sex(::std::string&& value) {
  set_has_sex();
  sex_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_infor_.sex)
}
#endif
void _infor_::set_sex(const char* value) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_infor_.sex)
}
void _infor_::set_sex(const char* value, size_t size) {
  set_has_sex();
  sex_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_infor_.sex)
}
::std::string* _infor_::mutable_sex() {
  set_has_sex();
  // @@protoc_insertion_point(field_mutable:_infor_.sex)
  return sex_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _infor_::release_sex() {
  // @@protoc_insertion_point(field_release:_infor_.sex)
  clear_has_sex();
  return sex_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _infor_::set_allocated_sex(::std::string* sex) {
  if (sex != NULL) {
    set_has_sex();
  } else {
    clear_has_sex();
  }
  sex_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sex);
  // @@protoc_insertion_point(field_set_allocated:_infor_.sex)
}

// optional string num = 4;
bool _infor_::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void _infor_::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
void _infor_::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void _infor_::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
const ::std::string& _infor_::num() const {
  // @@protoc_insertion_point(field_get:_infor_.num)
  return num_.GetNoArena();
}
void _infor_::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_infor_.num)
}
#if LANG_CXX11
void _infor_::set_num(::std::string&& value) {
  set_has_num();
  num_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_infor_.num)
}
#endif
void _infor_::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_infor_.num)
}
void _infor_::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_infor_.num)
}
::std::string* _infor_::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:_infor_.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _infor_::release_num() {
  // @@protoc_insertion_point(field_release:_infor_.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _infor_::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:_infor_.num)
}

// optional string date = 5;
bool _infor_::has_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void _infor_::set_has_date() {
  _has_bits_[0] |= 0x00000010u;
}
void _infor_::clear_has_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void _infor_::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_date();
}
const ::std::string& _infor_::date() const {
  // @@protoc_insertion_point(field_get:_infor_.date)
  return date_.GetNoArena();
}
void _infor_::set_date(const ::std::string& value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_infor_.date)
}
#if LANG_CXX11
void _infor_::set_date(::std::string&& value) {
  set_has_date();
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_infor_.date)
}
#endif
void _infor_::set_date(const char* value) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_infor_.date)
}
void _infor_::set_date(const char* value, size_t size) {
  set_has_date();
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_infor_.date)
}
::std::string* _infor_::mutable_date() {
  set_has_date();
  // @@protoc_insertion_point(field_mutable:_infor_.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _infor_::release_date() {
  // @@protoc_insertion_point(field_release:_infor_.date)
  clear_has_date();
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _infor_::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    set_has_date();
  } else {
    clear_has_date();
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:_infor_.date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int _data_::kMsgbaseFieldNumber;
const int _data_::kFlagFieldNumber;
const int _data_::kTypeFieldNumber;
const int _data_::kInforFieldNumber;
const int _data_::kRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

_data_::_data_()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protocol_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:_data_)
}
_data_::_data_(const _data_& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ret()) {
    ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
  }
  if (from.has_msgbase()) {
    msgbase_ = new ::_base_(*from.msgbase_);
  } else {
    msgbase_ = NULL;
  }
  if (from.has_infor()) {
    infor_ = new ::_infor_(*from.infor_);
  } else {
    infor_ = NULL;
  }
  ::memcpy(&flag_, &from.flag_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&flag_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:_data_)
}

void _data_::SharedCtor() {
  _cached_size_ = 0;
  ret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgbase_, 0, reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&msgbase_) + sizeof(flag_));
  type_ = 1;
}

_data_::~_data_() {
  // @@protoc_insertion_point(destructor:_data_)
  SharedDtor();
}

void _data_::SharedDtor() {
  ret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete msgbase_;
  }
  if (this != internal_default_instance()) {
    delete infor_;
  }
}

void _data_::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* _data_::descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4].descriptor;
}

const _data_& _data_::default_instance() {
  protobuf_protocol_2eproto::InitDefaults();
  return *internal_default_instance();
}

_data_* _data_::New(::google::protobuf::Arena* arena) const {
  _data_* n = new _data_;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void _data_::Clear() {
// @@protoc_insertion_point(message_clear_start:_data_)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_ret()) {
      GOOGLE_DCHECK(!ret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*ret_.UnsafeRawStringPointer())->clear();
    }
    if (has_msgbase()) {
      GOOGLE_DCHECK(msgbase_ != NULL);
      msgbase_->::_base_::Clear();
    }
    if (has_infor()) {
      GOOGLE_DCHECK(infor_ != NULL);
      infor_->::_infor_::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    flag_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool _data_::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:_data_)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required ._base_ msgbase = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msgbase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 flag = 2;
      case 2: {
        if (tag == 16u) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional ._data_.Type type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::_data__Type_IsValid(value)) {
            set_type(static_cast< ::_data__Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional ._infor_ infor = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ret = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "_data_.ret");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:_data_)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:_data_)
  return false;
#undef DO_
}

void _data_::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:_data_)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->msgbase_, output);
  }

  // required int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional ._data_.Type type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional ._infor_ infor = 4;
  if (has_infor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->infor_, output);
  }

  // optional string ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_data_.ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:_data_)
}

::google::protobuf::uint8* _data_::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:_data_)
  // required ._base_ msgbase = 1;
  if (has_msgbase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->msgbase_, false, target);
  }

  // required int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional ._data_.Type type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional ._infor_ infor = 4;
  if (has_infor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->infor_, false, target);
  }

  // optional string ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "_data_.ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:_data_)
  return target;
}

size_t _data_::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:_data_)
  size_t total_size = 0;

  if (has_msgbase()) {
    // required ._base_ msgbase = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msgbase_);
  }

  if (has_flag()) {
    // required int32 flag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());
  }

  return total_size;
}
size_t _data_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:_data_)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000a) ^ 0x0000000a) == 0) {  // All required fields are present.
    // required ._base_ msgbase = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->msgbase_);

    // required int32 flag = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ret = 5;
  if (has_ret()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ret());
  }

  // optional ._infor_ infor = 4;
  if (has_infor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->infor_);
  }

  // optional ._data_.Type type = 3;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void _data_::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:_data_)
  GOOGLE_DCHECK_NE(&from, this);
  const _data_* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const _data_>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:_data_)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:_data_)
    MergeFrom(*source);
  }
}

void _data_::MergeFrom(const _data_& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:_data_)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_ret()) {
      set_has_ret();
      ret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ret_);
    }
    if (from.has_msgbase()) {
      mutable_msgbase()->::_base_::MergeFrom(from.msgbase());
    }
    if (from.has_infor()) {
      mutable_infor()->::_infor_::MergeFrom(from.infor());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void _data_::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:_data_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void _data_::CopyFrom(const _data_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:_data_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool _data_::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000a) != 0x0000000a) return false;
  if (has_msgbase()) {
    if (!this->msgbase_->IsInitialized()) return false;
  }
  if (has_infor()) {
    if (!this->infor_->IsInitialized()) return false;
  }
  return true;
}

void _data_::Swap(_data_* other) {
  if (other == this) return;
  InternalSwap(other);
}
void _data_::InternalSwap(_data_* other) {
  ret_.Swap(&other->ret_);
  std::swap(msgbase_, other->msgbase_);
  std::swap(infor_, other->infor_);
  std::swap(flag_, other->flag_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata _data_::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// _data_

// required ._base_ msgbase = 1;
bool _data_::has_msgbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void _data_::set_has_msgbase() {
  _has_bits_[0] |= 0x00000002u;
}
void _data_::clear_has_msgbase() {
  _has_bits_[0] &= ~0x00000002u;
}
void _data_::clear_msgbase() {
  if (msgbase_ != NULL) msgbase_->::_base_::Clear();
  clear_has_msgbase();
}
const ::_base_& _data_::msgbase() const {
  // @@protoc_insertion_point(field_get:_data_.msgbase)
  return msgbase_ != NULL ? *msgbase_
                         : *::_base_::internal_default_instance();
}
::_base_* _data_::mutable_msgbase() {
  set_has_msgbase();
  if (msgbase_ == NULL) {
    msgbase_ = new ::_base_;
  }
  // @@protoc_insertion_point(field_mutable:_data_.msgbase)
  return msgbase_;
}
::_base_* _data_::release_msgbase() {
  // @@protoc_insertion_point(field_release:_data_.msgbase)
  clear_has_msgbase();
  ::_base_* temp = msgbase_;
  msgbase_ = NULL;
  return temp;
}
void _data_::set_allocated_msgbase(::_base_* msgbase) {
  delete msgbase_;
  msgbase_ = msgbase;
  if (msgbase) {
    set_has_msgbase();
  } else {
    clear_has_msgbase();
  }
  // @@protoc_insertion_point(field_set_allocated:_data_.msgbase)
}

// required int32 flag = 2;
bool _data_::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void _data_::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
void _data_::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
void _data_::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
::google::protobuf::int32 _data_::flag() const {
  // @@protoc_insertion_point(field_get:_data_.flag)
  return flag_;
}
void _data_::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:_data_.flag)
}

// optional ._data_.Type type = 3;
bool _data_::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void _data_::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void _data_::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void _data_::clear_type() {
  type_ = 1;
  clear_has_type();
}
::_data__Type _data_::type() const {
  // @@protoc_insertion_point(field_get:_data_.type)
  return static_cast< ::_data__Type >(type_);
}
void _data_::set_type(::_data__Type value) {
  assert(::_data__Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:_data_.type)
}

// optional ._infor_ infor = 4;
bool _data_::has_infor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void _data_::set_has_infor() {
  _has_bits_[0] |= 0x00000004u;
}
void _data_::clear_has_infor() {
  _has_bits_[0] &= ~0x00000004u;
}
void _data_::clear_infor() {
  if (infor_ != NULL) infor_->::_infor_::Clear();
  clear_has_infor();
}
const ::_infor_& _data_::infor() const {
  // @@protoc_insertion_point(field_get:_data_.infor)
  return infor_ != NULL ? *infor_
                         : *::_infor_::internal_default_instance();
}
::_infor_* _data_::mutable_infor() {
  set_has_infor();
  if (infor_ == NULL) {
    infor_ = new ::_infor_;
  }
  // @@protoc_insertion_point(field_mutable:_data_.infor)
  return infor_;
}
::_infor_* _data_::release_infor() {
  // @@protoc_insertion_point(field_release:_data_.infor)
  clear_has_infor();
  ::_infor_* temp = infor_;
  infor_ = NULL;
  return temp;
}
void _data_::set_allocated_infor(::_infor_* infor) {
  delete infor_;
  infor_ = infor;
  if (infor) {
    set_has_infor();
  } else {
    clear_has_infor();
  }
  // @@protoc_insertion_point(field_set_allocated:_data_.infor)
}

// optional string ret = 5;
bool _data_::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void _data_::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
void _data_::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
void _data_::clear_ret() {
  ret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ret();
}
const ::std::string& _data_::ret() const {
  // @@protoc_insertion_point(field_get:_data_.ret)
  return ret_.GetNoArena();
}
void _data_::set_ret(const ::std::string& value) {
  set_has_ret();
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:_data_.ret)
}
#if LANG_CXX11
void _data_::set_ret(::std::string&& value) {
  set_has_ret();
  ret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:_data_.ret)
}
#endif
void _data_::set_ret(const char* value) {
  set_has_ret();
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:_data_.ret)
}
void _data_::set_ret(const char* value, size_t size) {
  set_has_ret();
  ret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:_data_.ret)
}
::std::string* _data_::mutable_ret() {
  set_has_ret();
  // @@protoc_insertion_point(field_mutable:_data_.ret)
  return ret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* _data_::release_ret() {
  // @@protoc_insertion_point(field_release:_data_.ret)
  clear_has_ret();
  return ret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void _data_::set_allocated_ret(::std::string* ret) {
  if (ret != NULL) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
  ret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ret);
  // @@protoc_insertion_point(field_set_allocated:_data_.ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
